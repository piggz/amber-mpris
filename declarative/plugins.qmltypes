import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable Amber.Mpris 1.0'

Module {
    dependencies: ["QtQuick 2.0"]
    Component {
        name: "Amber::DeclarativeMprisPlayer"
        prototype: "Amber::MprisPlayer"
        exports: ["Amber.Mpris/MprisPlayer 1.0"]
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "Amber::Mpris"
        exports: ["Amber.Mpris/Mpris 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "PlaybackStatus"
            values: {
                "Stopped": 0,
                "Playing": 1,
                "Paused": 2
            }
        }
        Enum {
            name: "LoopStatus"
            values: {
                "LoopNone": 0,
                "LoopTrack": 1,
                "LoopPlaylist": 2
            }
        }
    }
    Component {
        name: "Amber::MprisClient"
        prototype: "QObject"
        exports: ["Amber.Mpris/MprisClient 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "service"; type: "string"; isReadonly: true }
        Property { name: "positionInterval"; type: "int" }
        Property { name: "isValid"; type: "bool"; isReadonly: true }
        Property { name: "canQuit"; type: "bool"; isReadonly: true }
        Property { name: "canRaise"; type: "bool"; isReadonly: true }
        Property { name: "canSetFullscreen"; type: "bool"; isReadonly: true }
        Property { name: "desktopEntry"; type: "string"; isReadonly: true }
        Property { name: "fullscreen"; type: "bool" }
        Property { name: "hasTrackList"; type: "bool"; isReadonly: true }
        Property { name: "identity"; type: "string"; isReadonly: true }
        Property { name: "supportedUriSchemes"; type: "QStringList"; isReadonly: true }
        Property { name: "supportedMimeTypes"; type: "QStringList"; isReadonly: true }
        Property { name: "canControl"; type: "bool"; isReadonly: true }
        Property { name: "canGoNext"; type: "bool"; isReadonly: true }
        Property { name: "canGoPrevious"; type: "bool"; isReadonly: true }
        Property { name: "canPause"; type: "bool"; isReadonly: true }
        Property { name: "canPlay"; type: "bool"; isReadonly: true }
        Property { name: "canSeek"; type: "bool"; isReadonly: true }
        Property { name: "loopStatus"; type: "Amber::Mpris::LoopStatus" }
        Property { name: "maximumRate"; type: "double"; isReadonly: true }
        Property { name: "metaData"; type: "Amber::MprisMetaData"; isReadonly: true; isPointer: true }
        Property { name: "minimumRate"; type: "double"; isReadonly: true }
        Property { name: "playbackStatus"; type: "Amber::Mpris::PlaybackStatus"; isReadonly: true }
        Property { name: "position"; type: "qlonglong"; isReadonly: true }
        Property { name: "rate"; type: "double" }
        Property { name: "shuffle"; type: "bool" }
        Property { name: "volume"; type: "double" }
        Signal {
            name: "positionChanged"
            Parameter { name: "position"; type: "qlonglong" }
        }
        Signal {
            name: "seeked"
            Parameter { name: "position"; type: "qlonglong" }
        }
        Method { name: "quit"; type: "bool" }
        Method { name: "raise"; type: "bool" }
        Method { name: "next"; type: "bool" }
        Method {
            name: "openUri"
            type: "bool"
            Parameter { name: "uri"; type: "QUrl" }
        }
        Method { name: "pause"; type: "bool" }
        Method { name: "play"; type: "bool" }
        Method { name: "playPause"; type: "bool" }
        Method { name: "previous"; type: "bool" }
        Method {
            name: "seek"
            type: "bool"
            Parameter { name: "offset"; type: "qlonglong" }
        }
        Method {
            name: "setPosition"
            type: "bool"
            Parameter { name: "position"; type: "qlonglong" }
        }
        Method {
            name: "setPosition"
            type: "bool"
            Parameter { name: "aTrackId"; type: "string" }
            Parameter { name: "position"; type: "qlonglong" }
        }
        Method { name: "stop"; type: "bool" }
    }
    Component {
        name: "Amber::MprisController"
        prototype: "QObject"
        exports: ["Amber.Mpris/MprisController 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "singleService"; type: "bool" }
        Property { name: "currentService"; type: "string" }
        Property { name: "availableServices"; type: "QStringList"; isReadonly: true }
        Property { name: "availableClients"; type: "QList<QObject*>"; isReadonly: true }
        Property { name: "canQuit"; type: "bool"; isReadonly: true }
        Property { name: "canRaise"; type: "bool"; isReadonly: true }
        Property { name: "canSetFullscreen"; type: "bool"; isReadonly: true }
        Property { name: "desktopEntry"; type: "string"; isReadonly: true }
        Property { name: "fullscreen"; type: "bool" }
        Property { name: "hasTrackList"; type: "bool"; isReadonly: true }
        Property { name: "identity"; type: "string"; isReadonly: true }
        Property { name: "supportedUriSchemes"; type: "QStringList"; isReadonly: true }
        Property { name: "supportedMimeTypes"; type: "QStringList"; isReadonly: true }
        Property { name: "canControl"; type: "bool"; isReadonly: true }
        Property { name: "canGoNext"; type: "bool"; isReadonly: true }
        Property { name: "canGoPrevious"; type: "bool"; isReadonly: true }
        Property { name: "canPause"; type: "bool"; isReadonly: true }
        Property { name: "canPlay"; type: "bool"; isReadonly: true }
        Property { name: "canSeek"; type: "bool"; isReadonly: true }
        Property { name: "loopStatus"; type: "Amber::Mpris::LoopStatus" }
        Property { name: "maximumRate"; type: "double"; isReadonly: true }
        Property { name: "metaData"; type: "Amber::MprisMetaData"; isReadonly: true; isPointer: true }
        Property { name: "minimumRate"; type: "double"; isReadonly: true }
        Property { name: "playbackStatus"; type: "Amber::Mpris::PlaybackStatus"; isReadonly: true }
        Property { name: "position"; type: "qlonglong"; isReadonly: true }
        Property { name: "rate"; type: "double" }
        Property { name: "shuffle"; type: "bool" }
        Property { name: "volume"; type: "double" }
        Signal {
            name: "positionChanged"
            Parameter { name: "position"; type: "qlonglong" }
        }
        Signal {
            name: "seeked"
            Parameter { name: "position"; type: "qlonglong" }
        }
        Method { name: "quit"; type: "bool" }
        Method { name: "raise"; type: "bool" }
        Method { name: "next"; type: "bool" }
        Method {
            name: "openUri"
            type: "bool"
            Parameter { name: "uri"; type: "QUrl" }
        }
        Method { name: "pause"; type: "bool" }
        Method { name: "play"; type: "bool" }
        Method { name: "playPause"; type: "bool" }
        Method { name: "previous"; type: "bool" }
        Method {
            name: "seek"
            type: "bool"
            Parameter { name: "offset"; type: "qlonglong" }
        }
        Method {
            name: "setPosition"
            type: "bool"
            Parameter { name: "position"; type: "qlonglong" }
        }
        Method {
            name: "setPosition"
            type: "bool"
            Parameter { name: "trackId"; type: "string" }
            Parameter { name: "position"; type: "qlonglong" }
        }
        Method { name: "stop"; type: "bool" }
    }
    Component {
        name: "Amber::MprisMetaData"
        prototype: "QObject"
        exports: ["Amber.Mpris/MprisMetaData 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "trackId"; type: "QVariant" }
        Property { name: "duration"; type: "QVariant" }
        Property { name: "artUrl"; type: "QVariant" }
        Property { name: "albumTitle"; type: "QVariant" }
        Property { name: "albumArtist"; type: "QVariant" }
        Property { name: "contributingArtist"; type: "QVariant" }
        Property { name: "lyrics"; type: "QVariant" }
        Property { name: "audioBpm"; type: "QVariant" }
        Property { name: "autoRating"; type: "QVariant" }
        Property { name: "comment"; type: "QVariant" }
        Property { name: "composer"; type: "QVariant" }
        Property { name: "year"; type: "QVariant" }
        Property { name: "date"; type: "QVariant" }
        Property { name: "discNumber"; type: "QVariant" }
        Property { name: "firstUsed"; type: "QVariant" }
        Property { name: "genre"; type: "QVariant" }
        Property { name: "lastUsed"; type: "QVariant" }
        Property { name: "writer"; type: "QVariant" }
        Property { name: "title"; type: "QVariant" }
        Property { name: "trackNumber"; type: "QVariant" }
        Property { name: "url"; type: "QVariant" }
        Property { name: "useCount"; type: "QVariant" }
        Property { name: "userRating"; type: "QVariant" }
        Property { name: "extraFields"; type: "QVariantMap" }
        Property { name: "fillFrom"; type: "QVariant" }
        Signal { name: "metaDataChanged" }
    }
    Component {
        name: "Amber::MprisPlayer"
        prototype: "QObject"
        Property { name: "serviceName"; type: "string" }
        Property { name: "canQuit"; type: "bool" }
        Property { name: "canRaise"; type: "bool" }
        Property { name: "canSetFullscreen"; type: "bool" }
        Property { name: "desktopEntry"; type: "string" }
        Property { name: "fullscreen"; type: "bool" }
        Property { name: "hasTrackList"; type: "bool" }
        Property { name: "identity"; type: "string" }
        Property { name: "supportedUriSchemes"; type: "QStringList" }
        Property { name: "supportedMimeTypes"; type: "QStringList" }
        Property { name: "canControl"; type: "bool" }
        Property { name: "canGoNext"; type: "bool" }
        Property { name: "canGoPrevious"; type: "bool" }
        Property { name: "canPause"; type: "bool" }
        Property { name: "canPlay"; type: "bool" }
        Property { name: "canSeek"; type: "bool" }
        Property { name: "loopStatus"; type: "Amber::Mpris::LoopStatus" }
        Property { name: "maximumRate"; type: "double" }
        Property { name: "metaData"; type: "Amber::MprisMetaData"; isReadonly: true; isPointer: true }
        Property { name: "minimumRate"; type: "double" }
        Property { name: "playbackStatus"; type: "Amber::Mpris::PlaybackStatus" }
        Property { name: "position"; type: "qlonglong" }
        Property { name: "rate"; type: "double" }
        Property { name: "shuffle"; type: "bool" }
        Property { name: "volume"; type: "double" }
        Signal {
            name: "fullscreenRequested"
            Parameter { name: "fullscreen"; type: "bool" }
        }
        Signal { name: "quitRequested" }
        Signal { name: "raiseRequested" }
        Signal { name: "positionRequested" }
        Signal {
            name: "loopStatusRequested"
            Parameter { name: "loopStatus"; type: "int" }
        }
        Signal {
            name: "rateRequested"
            Parameter { name: "rate"; type: "double" }
        }
        Signal {
            name: "shuffleRequested"
            Parameter { name: "shuffle"; type: "bool" }
        }
        Signal {
            name: "volumeRequested"
            Parameter { name: "volume"; type: "double" }
        }
        Signal { name: "nextRequested" }
        Signal {
            name: "openUriRequested"
            Parameter { name: "uri"; type: "QUrl" }
        }
        Signal { name: "pauseRequested" }
        Signal { name: "playRequested" }
        Signal { name: "playPauseRequested" }
        Signal { name: "previousRequested" }
        Signal {
            name: "seekRequested"
            Parameter { name: "offset"; type: "qlonglong" }
        }
        Signal {
            name: "seeked"
            Parameter { name: "position"; type: "qlonglong" }
        }
        Signal {
            name: "setPositionRequested"
            Parameter { name: "trackId"; type: "string" }
            Parameter { name: "position"; type: "qlonglong" }
        }
        Signal { name: "stopRequested" }
    }
}
